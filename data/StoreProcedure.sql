USE TIME_MANAGEMENT_HANDBOOK

GO

-- FUNCTION IS USED TO INCREASE ID_USER AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_USER()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_USER VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM _USER WHERE IS_DELETED = 0) = 0)
		RETURN 0

	SELECT TOP 1 @MAX_ID_USER = USERID
	FROM _USER
	ORDER BY USERID DESC;
	
	DECLARE @SUB_MAX VARCHAR(30) = SUBSTRING(@MAX_ID_USER, 3, LEN(@MAX_ID_USER))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

-- INSERT A NEW ACCOUNT
CREATE OR ALTER PROC USP_INSERT_NEW_USER
@EMAIL VARCHAR(50)
AS
BEGIN
	DECLARE @ID VARCHAR(30)
	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_USER()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @ID = 'SV' + CAST(@MAX_COUNT AS VARCHAR(30))
	INSERT INTO _USER(USERID, EMAIL)
	VALUES (@ID, @EMAIL)
END

GO

-- SELECT EVENT_OF_THE_DAY BY EMAIL

CREATE OR ALTER PROC USP_GET_EVENT_OF_THE_DAY_BY_ID
@EMAIL VARCHAR(50), @DATETIME VARCHAR(25)
AS
BEGIN
	DECLARE @USERID VARCHAR(30), @TIME_NOW DATETIME
	SET @TIME_NOW = CAST(@DATETIME AS SMALLDATETIME)
	SELECT @USERID = USERID FROM _USER WHERE EMAIL = @EMAIL
	AND IS_DELETED = 0  
	SELECT * FROM EVENT_OF_THE_DAY WHERE USERID = @USERID
	AND IS_DELETED = 0 AND @TIME_NOW >= _START_TIME AND 
	@TIME_NOW <= _END_TIME AND IS_DELETED = 0
END

GO

-- FUNCTION IS USED TO INCREASE EVENT_ID OF THE DAY AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_EVENT_OF_THE_DAY()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_EVENT VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM EVENT_OF_THE_DAY WHERE IS_DELETED = 0) = 0 )
		RETURN 0

	SELECT TOP 1 @MAX_ID_EVENT = EVENT_ID
	FROM EVENT_OF_THE_DAY
	ORDER BY EVENT_ID DESC;
	
	DECLARE @SUB_MAX VARCHAR(30) = SUBSTRING(@MAX_ID_EVENT, 3, LEN(@MAX_ID_EVENT))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

-- INSERT NEW EVENT

CREATE OR ALTER PROC INSERT_NEW_EVENT_OF_THE_DAY
@EMAIL VARCHAR(50), @SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@START VARCHAR(20), @END VARCHAR(20), @NOTIFICATION_PERIOD VARCHAR(100),
@DESCRIPTION NVARCHAR (200), @COLOR INT
AS 
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0
	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_EVENT_OF_THE_DAY()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @EVENT_ID = 'EV' + CAST(@MAX_COUNT AS VARCHAR(30))

	INSERT INTO EVENT_OF_THE_DAY 
	VALUES (@EVENT_ID, @USER_ID, @SUMMARY, @LOCATION, @START, @END, 
	@NOTIFICATION_PERIOD, @DESCRIPTION, @COLOR, 0)
END

GO

-- SELECT PROLONGED_EVENT BY EMAIL BY EMAIL

CREATE OR ALTER PROC USP_GET_PROLONGED_EVENT_BY_EMAIL
@EMAIL VARCHAR(50), @DATETIME VARCHAR(25)
AS
BEGIN
	DECLARE @ID_USER VARCHAR(30),  @DATE_NOW DATE
	SELECT @ID_USER = USERID FROM _USER 
	WHERE EMAIL = @EMAIL AND IS_DELETED = 0
	SET @DATE_NOW = CAST(@DATETIME AS DATE)
	SELECT * FROM PROLONGED_EVENT WHERE USERID = @ID_USER
	AND IS_DELETED = 0 AND @DATE_NOW >= _START_DATE AND 
	@DATE_NOW <= _END_DATE AND IS_DELETED = 0
END

GO

CREATE OR ALTER PROC USP_GET_TASK_BY_EMAIL
@EMAIL VARCHAR(50), @DATETIME VARCHAR(25)
AS
BEGIN
	DECLARE @USERID VARCHAR(30), @TIME_NOW DATETIME
	SET @TIME_NOW = CAST(@DATETIME AS SMALLDATETIME)
	SELECT @USERID = USERID FROM _USER WHERE EMAIL = @EMAIL
	AND IS_DELETED = 0  
	SELECT * FROM EVENT_OF_THE_DAY WHERE USERID = @USERID
	AND IS_DELETED = 0 AND @TIME_NOW >= _START_TIME AND 
	@TIME_NOW <= _END_TIME AND IS_DELETED = 0
END






GO

-- INSERT A NEW EVENT
CREATE PROC USP_INSERTEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	INSERT INTO EVENT(EVENT_ID, USERID, NAME, _DATE, CATEGORY, START_TIME, END_TIME, REPEAT, DESCRIPTION)
	VALUES (@EVENTID, @USERID, @NAME, @IDATE, @CATEGORY, @ISTART, @IEND, @REPEAT, @DESCRIP)
END

GO

-- INSERT A NEW TASK
CREATE PROC USP_INSERTTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	INSERT INTO TASK(TASK_ID, USERID, NAME, END_DATE, SUBJECT, DESCRIPTION)
	VALUES (@TASKID, @USERID, @NAME, @IEND, @SUBJECT, @DESCRIP)
END

GO

-- INSERT AN ANNOUNCEMENT TO AN EVENT
CREATE PROC USP_INSERTNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_EVENT(EVENT_ID, NOTI_ID, NOTIFICATE)
	VALUES (@EVENTID, @NOTIID, @INOTIFICATE)
END

GO

-- INSERT AN ANNOUNCEMENT TO A TASK
CREATE PROC USP_INSERTNOTI_TASK
@TASKTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_TASK(TASK_ID, NOTI_ID, NOTIFICATE)
	VALUES (@TASKTID, @NOTIID, @INOTIFICATE)
END

GO

-- DELETE AN ACCOUNT
CREATE PROC USP_DELETEUSER
@ID VARCHAR(20)
AS
BEGIN
	UPDATE _USER
	SET IS_DELETED = 1
	WHERE USERID = @ID
END

GO

-- DELETE AN EVENT
CREATE PROC USP_DELETEEVENT
@ID VARCHAR(20)
AS
BEGIN
	UPDATE EVENT
	SET IS_DELETED = 1
	WHERE EVENT_ID = @ID
END

GO

-- DELETE A TASK
CREATE PROC USP_DELETETASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET IS_DELETED = 1
	WHERE TASK_ID = @ID
END

GO

-- DELETE AN ANNOUNCEMENT OF AN EVENT
CREATE PROC USP_DELETENOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_EVENT
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

-- DELETE AN ANNOUNCEMENT OF A TASK
CREATE PROC USP_DELETENOTI_TASK
@TASKID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_TASK
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

-- UPDATE AN USER
CREATE PROC USP_EDITUSER
@USERID VARCHAR(20), @NAME NVARCHAR(50), @EMAIL VARCHAR(50)
AS
BEGIN
	UPDATE _USER
	SET FULLNAME = @NAME, EMAIL = @EMAIL
	WHERE USERID = @USERID
END

GO

-- UPDATE AN EVENT
CREATE PROC USP_EDITEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	UPDATE EVENT
	SET USERID = @USERID, NAME = @NAME, _DATE = @IDATE, CATEGORY = @CATEGORY,
		START_TIME = @ISTART, END_TIME = @IEND, REPEAT = @REPEAT, DESCRIPTION = @DESCRIP
	WHERE EVENT_ID = @EVENTID
END

GO

-- UPDATE A TASK
CREATE PROC USP_EDITTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	UPDATE TASK
	SET USERID = @USERID, NAME = @NAME, END_DATE = @IEND, SUBJECT = @SUBJECT, DESCRIPTION = @DESCRIP
	WHERE TASK_ID = @TASKID
END

GO

-- UPDATE AN ANNOUNCEMENT OF EVENT
CREATE PROC USP_EDITNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_EVENT
	SET NOTIFICATE = @NOTIFICATE
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

-- UPDATE AN ANNOUNCEMENT OF TASK
CREATE PROC USP_EDITTASK_EVENT
@TASKID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_TASK
	SET NOTIFICATE = @NOTIFICATE
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

-- MARK AN EVENT COMPLETED
CREATE PROC USP_FINISHTASK
@ID VARCHAR(20), @FINISH_DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @DATE DATETIME
	SET @DATE = CAST(@FINISH_DATE AS DATETIME)
	UPDATE TASK
	SET DATE_FINISHED = @DATE
	WHERE TASK_ID = @ID
END

GO

-- UNDO A TASK (MEANS TO CONVERT A COMPLETED TASK TO UNCOMPLETED)
CREATE PROC USP_RETURNTASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET DATE_FINISHED = NULL
	WHERE TASK_ID = @ID
END

GO
 
-- SHOW ALL OF ACCOUNTS
CREATE PROC LOADLIST_USER
AS
BEGIN
	SELECT * FROM _USER
END

GO

-- SHOW ALL OF EVENTS IN A DAY
CREATE PROC LOADLIST_EVENT
@DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	SELECT EVENT_ID, EMAIL, NAME, CATEGORY, START_TIME, END_TIME, DESCRIPTION
	FROM EVENT JOIN _USER ON EVENT.USERID = _USER.USERID
	WHERE _DATE = CAST(@DATE AS SMALLDATETIME)
END

GO

-- SHOWS UPCOMING AND DURING DEADLINES OF THE DAY
CREATE PROC LOADLIST_TASK
@DATE VARCHAR(50)
AS
BEGIN
	SELECT TASK_ID, EMAIL, NAME, END_DATE, SUBJECT, DESCRIPTION
	FROM TASK JOIN _USER ON TASK.TASK_ID = _USER.USERID
	WHERE BEGIN_DATE<=CAST(@DATE AS DATETIME) AND CAST(@DATE AS DATETIME)<=END_DATE
END