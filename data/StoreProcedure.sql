USE TIME_MANAGEMENT_HANDBOOK

GO

-- FUNCTION IS USED TO INCREASE ID_USER AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_USER()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_USER VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM _USER WHERE IS_DELETED = 0) = 0)
		RETURN 0

	SELECT TOP 1 @MAX_ID_USER = USERID
	FROM _USER
	ORDER BY USERID DESC;
	
	DECLARE @SUB_MAX VARCHAR(30) = SUBSTRING(@MAX_ID_USER, 3, LEN(@MAX_ID_USER))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

-- INSERT A NEW ACCOUNT
CREATE OR ALTER PROC USP_INSERT_NEW_USER
@EMAIL VARCHAR(50)
AS
BEGIN
	DECLARE @ID VARCHAR(30)
	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_USER()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @ID = 'SV' + CAST(@MAX_COUNT AS VARCHAR(30))
	INSERT INTO _USER(USERID, EMAIL)
	VALUES (@ID, @EMAIL)
END

GO

-- SELECT EVENT_OF_THE_DAY BY EMAIL

CREATE OR ALTER PROC USP_GET_EVENT_OF_THE_DAY_BY_ID
@EMAIL VARCHAR(50), @DATETIME VARCHAR(25)
AS
BEGIN
	DECLARE @USERID VARCHAR(30), @TIME_NOW DATE
	SET @TIME_NOW = CAST(@DATETIME AS DATE)
	SELECT @USERID = USERID FROM _USER WHERE EMAIL = @EMAIL
	AND IS_DELETED = 0  
	SELECT * FROM EVENT_OF_THE_DAY WHERE USERID = @USERID
	AND IS_DELETED = 0 AND @TIME_NOW >= _START_TIME AND 
	@TIME_NOW <= _END_TIME AND IS_DELETED = 0

	SELECT * FROM EVENT_OF_THE_DAY WHERE USERID = @USERID
	AND IS_DELETED = 0 AND @TIME_NOW = CAST(_START_TIME AS DATE)
END

GO

-- FUNCTION IS USED TO INCREASE EVENT_ID OF THE DAY AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_EVENT_OF_THE_DAY()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_EVENT VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM EVENT_OF_THE_DAY) = 0 )
		RETURN 0

	SELECT TOP 1 @MAX_ID_EVENT = EVENT_ID
	FROM EVENT_OF_THE_DAY
	ORDER BY CAST(SUBSTRING(EVENT_ID, 3, LEN(@MAX_ID_EVENT)) AS INT) DESC;
	
	
	DECLARE @SUB_MAX VARCHAR(30) = SUBSTRING(@MAX_ID_EVENT, 3, LEN(@MAX_ID_EVENT))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT) 

	RETURN @MAX_NUM
END

GO

-- INSERT NEW EVENT

CREATE OR ALTER PROC INSERT_NEW_EVENT_OF_THE_DAY
@EMAIL VARCHAR(50), @SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@START VARCHAR(20), @END VARCHAR(20), @NOTIFICATION_PERIOD VARCHAR(100),
@DESCRIPTION NVARCHAR (200), @COLOR INT
AS 
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0
	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_EVENT_OF_THE_DAY()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @EVENT_ID = 'EV' + CAST(@MAX_COUNT AS VARCHAR(30))

	DECLARE @START_TIME DATETIME, @END_TIME DATETIME
	SET @START_TIME = CAST(@START AS DATETIME)
	SET @END_TIME = CAST(@END AS DATETIME)

	INSERT INTO EVENT_OF_THE_DAY 
	VALUES (@EVENT_ID, @USER_ID, @SUMMARY, @LOCATION, @START_TIME, @END_TIME, 
	@NOTIFICATION_PERIOD, @DESCRIPTION, @COLOR, 0)
END

GO

-- SELECT PROLONGED_EVENT BY EMAIL BY EMAIL

CREATE OR ALTER PROC USP_GET_PROLONGED_EVENT_BY_EMAIL
@EMAIL VARCHAR(50), @DATETIME VARCHAR(25)
AS
BEGIN
	DECLARE @ID_USER VARCHAR(30),  @DATE_NOW DATE
	SELECT @ID_USER = USERID FROM _USER 
	WHERE EMAIL = @EMAIL AND IS_DELETED = 0
	SET @DATE_NOW = CAST(@DATETIME AS DATE)
	SELECT * FROM PROLONGED_EVENT WHERE USERID = @ID_USER
	AND IS_DELETED = 0 AND @DATE_NOW >= _START_DATE AND 
	@DATE_NOW <= _END_DATE AND IS_DELETED = 0
END

GO

-- GET LIST TASK BY EMAIL

CREATE OR ALTER PROC USP_GET_TASK_BY_EMAIL
@EMAIL VARCHAR(50), @DATETIME VARCHAR(30)
AS
BEGIN
	DECLARE @USERID VARCHAR(30), @TIME_NOW DATE
	SET @TIME_NOW = CAST(@DATETIME AS DATE)
	SELECT @USERID = USERID FROM _USER WHERE EMAIL = @EMAIL
	AND IS_DELETED = 0  
	SELECT * FROM TASK WHERE USERID = @USERID 
	AND IS_DELETED = 0 AND (@TIME_NOW BETWEEN CAST(CREATING_TIME AS DATE)
	AND CAST(END_TIME AS DATE) OR @TIME_NOW BETWEEN CAST(CREATING_TIME AS DATE)
	AND CAST(FINISHED_TIME AS DATE))
END

GO

-- FUNCTION IS USED TO INCREASE EVENT_ID OF PROLONGED_EVENT AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_PROLONGED_EVENT()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_EVENT VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM PROLONGED_EVENT) = 0 )
		RETURN 0

	SELECT TOP 1 @MAX_ID_EVENT = EVENT_ID
	FROM PROLONGED_EVENT
	ORDER BY CAST(SUBSTRING(EVENT_ID, 3, LEN(EVENT_ID)) AS INT) DESC;
	
	DECLARE @SUB_MAX VARCHAR(30)
	SET @SUB_MAX = SUBSTRING(@MAX_ID_EVENT, 3, LEN(@MAX_ID_EVENT))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

-- INSERT NEW PROLONGED EVENT

CREATE OR ALTER PROC USP_INSERT_NEW_PROLONGED_OF_THE_DAY
@EMAIL VARCHAR(50), @SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@START VARCHAR(20), @END VARCHAR(20), @NOTIFICATION_PERIOD VARCHAR(100),
@DESCRIPTION NVARCHAR (200), @COLOR INT
AS
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0
	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_PROLONGED_EVENT()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @EVENT_ID = 'PR' + CAST(@MAX_COUNT AS VARCHAR(30))

	DECLARE @START_TIME DATETIME, @END_TIME DATETIME
	SET @START_TIME = CAST(@START AS DATETIME)
	SET @END_TIME = CAST(@END AS DATETIME)

	INSERT INTO PROLONGED_EVENT
	VALUES (@EVENT_ID, @USER_ID, @SUMMARY, @LOCATION, @START_TIME, @END_TIME, 
	@NOTIFICATION_PERIOD, @DESCRIPTION, @COLOR, 0)
END

GO

-- FUNCTION IS USED TO INCREASE TASK_ID OF TASK AUTOMATICALLY

CREATE OR ALTER FUNCTION dbo.GET_MAX_ID_TASK()
RETURNS INT
AS
BEGIN
	DECLARE 
		@MAX_ID_EVENT VARCHAR(30), 
		@MAX_NUM INT

	IF ((SELECT COUNT(*) FROM TASK) = 0 )
		RETURN 0

	SELECT TOP 1 @MAX_ID_EVENT = TASK_ID
	FROM TASK
	ORDER BY CAST(SUBSTRING(TASK_ID, 3, LEN(TASK_ID)) AS INT) DESC;
	
	DECLARE @SUB_MAX VARCHAR(30) = SUBSTRING(@MAX_ID_EVENT, 3, LEN(@MAX_ID_EVENT))
	SET @MAX_NUM = CAST(@SUB_MAX AS INT)

	RETURN @MAX_NUM
END

GO

-- INSERT NEW TASK BY EMAIL

CREATE OR ALTER PROC USP_INSERT_NEW_TASK
@EMAIL VARCHAR(50), @NAME NVARCHAR(100), @LOCATION NVARCHAR(100),
@CREATING_TIME VARCHAR(20), @END_TIME VARCHAR(20), @NOTIFICATION_PERIOD VARCHAR(100),
@DESCRIPTION NVARCHAR (200), @FINISH_TIME VARCHAR(20), @COLOR INT
AS
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0

	DECLARE @MAX_COUNT INT
	SET @MAX_COUNT = dbo.GET_MAX_ID_TASK()
	SET @MAX_COUNT = @MAX_COUNT + 1
	SET @EVENT_ID = 'TA' + CAST(@MAX_COUNT AS VARCHAR(30))


	DECLARE @FINISH DATETIME, @END DATETIME, @CREATING DATETIME
	SET @CREATING = CAST(@CREATING_TIME AS DATETIME)
	SET @END = CAST(@END_TIME AS DATETIME)
	SET @FINISH = CAST(@FINISH_TIME AS DATETIME)

	INSERT INTO TASK VALUES (@EVENT_ID, @USER_ID, @NAME,
	@LOCATION, @CREATING, @END, @NOTIFICATION_PERIOD,
	@DESCRIPTION, @FINISH, @COLOR, 0)
END

GO

-- DELETE EVENT_OF_THE_DAY BY EMAIL, START_TIME, END_TIME AND SUMMARY

CREATE OR ALTER PROC USP_DELETE_EVENT_OF_THE_DAY
@EMAIL VARCHAR(50), @SUMMARY VARCHAR(100), 
@START VARCHAR(20), @END VARCHAR(20)
AS
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0

	DECLARE @START_TIME DATETIME, @END_TIME DATETIME
	SET @START_TIME = CAST(@START AS DATETIME)
	SET @END_TIME = CAST(@END AS DATETIME)

	UPDATE EVENT_OF_THE_DAY SET IS_DELETED = 1
	WHERE USERID = @USER_ID AND SUMMARY = @SUMMARY 
	AND _START_TIME = @START_TIME AND _END_TIME = @END_TIME
	AND IS_DELETED = 0
END

GO

-- DELETE PROLONGED_END BY EMAIL, START_TIME, END_TIME AND SUMMARY

CREATE OR ALTER PROC USP_DELETE_PROLONGED_EVENT
@EMAIL VARCHAR(50), @SUMMARY VARCHAR(100), 
@START VARCHAR(20), @END VARCHAR(20)
AS
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0

	DECLARE @START_TIME DATE, @END_TIME DATE
	SET @START_TIME = CAST(@START AS DATE)
	SET @END_TIME = CAST(@END AS DATE)

	UPDATE PROLONGED_EVENT SET IS_DELETED = 1
	WHERE USERID = @USER_ID AND SUMMARY = @SUMMARY 
	AND _START_DATE = @START_TIME AND _END_DATE = @END_TIME
	AND IS_DELETED = 0
END

GO

CREATE OR ALTER PROC USP_DELETE_TASK
@EMAIL VARCHAR(50), @NAME VARCHAR(100), 
@END VARCHAR(20)
AS
BEGIN
	DECLARE @USER_ID VARCHAR(30), @EVENT_ID VARCHAR(30)
	SELECT @USER_ID = USERID FROM _USER WHERE EMAIL = @EMAIL AND IS_DELETED = 0

	DECLARE @END_TIME DATETIME
	SET @END_TIME = CAST(@END AS DATETIME)

	UPDATE TASK SET IS_DELETED = 1
	WHERE USERID = @USER_ID AND NAME = @NAME 
	AND END_TIME = @END_TIME AND IS_DELETED = 0
END

GO

CREATE OR ALTER PROC USP_UPDATE_EVENT_OF_THE_DAY
@EVENT_ID VARCHAR(30),
@SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@START_TIME DATETIME, @END_TIME DATETIME,
@NOTIFICATION VARCHAR(100), @DESCRIPTION NVARCHAR(200),
@COLOR INT
AS
BEGIN
	DECLARE @START DATETIME, @END DATETIME
	SET @START = CAST(@START_TIME AS DATETIME)
	SET @END = CAST(@END_TIME AS DATETIME)

	UPDATE EVENT_OF_THE_DAY SET SUMMARY = @SUMMARY,
	LOCATION = @LOCATION, _START_TIME = @START,
	_END_TIME = @END, NOTIFICATION_PERIOD = @NOTIFICATION,
	DESCRIPTION = @DESCRIPTION, COLOR = @COLOR
	WHERE EVENT_ID = @EVENT_ID 
END

GO

CREATE OR ALTER PROC USP_UPDATE_PROLONGED_EVENT
@EVENT_ID VARCHAR(30),
@SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@START_TIME DATE, @END_TIME DATE,
@NOTIFICATION VARCHAR(100), @DESCRIPTION NVARCHAR(200),
@COLOR INT
AS
BEGIN
	DECLARE @START DATE, @END DATE
	SET @START = CAST(@START_TIME AS DATE)
	SET @END = CAST(@END_TIME AS DATE)

	UPDATE PROLONGED_EVENT SET SUMMARY = @SUMMARY,
	LOCATION = @LOCATION, _START_DATE = @START,
	_END_DATE = @END, NOTIFICATION_PERIOD = @NOTIFICATION,
	DESCRIPTION = @DESCRIPTION, COLOR = @COLOR
	WHERE EVENT_ID = @EVENT_ID 
END

GO

CREATE OR ALTER PROC USP_UPDATE_TASK
@EVENT_ID VARCHAR(30),
@SUMMARY NVARCHAR(100), @LOCATION NVARCHAR(100),
@CREATING_TIME DATE, @END_TIME DATE,
@NOTIFICATION VARCHAR(100), @DESCRIPTION NVARCHAR(200),
@FINISH_TIME DATETIME, @COLOR INT
AS
BEGIN
	UPDATE TASK SET NAME = @SUMMARY,
	LOCATION = @LOCATION, CREATING_TIME = @CREATING_TIME,
	END_TIME = @END_TIME, NOTIFICATION_PERIOD = @NOTIFICATION,
	DESCRIPTION = @DESCRIPTION, FINISHED_TIME = @FINISH_TIME,
	COLOR = @COLOR WHERE TASK_ID = @EVENT_ID
END


select * from EVENT_OF_THE_DAY

EXEC USP_DELETE_TASK
'22520783@gm.uit.edu.vn', 'Khong co gi',
'2024-05-11 13:57:35', '2024-05-11 '

SELECT * FROM TASK

UPDATE PROLONGED_EVENT SET IS_DELETED = 0
WHERE EVENT_ID = 'PR6'


UPDATE TASK SET IS_DELETED = 0
	WHERE USERID = 'SV2' AND NAME = 'Khong co gi' 
	AND END_TIME = '2024-05-11 13:57:35' 



GO

-- INSERT A NEW EVENT
CREATE PROC USP_INSERTEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	INSERT INTO EVENT(EVENT_ID, USERID, NAME, _DATE, CATEGORY, START_TIME, END_TIME, REPEAT, DESCRIPTION)
	VALUES (@EVENTID, @USERID, @NAME, @IDATE, @CATEGORY, @ISTART, @IEND, @REPEAT, @DESCRIP)
END

GO

-- INSERT A NEW TASK
CREATE PROC USP_INSERTTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	INSERT INTO TASK(TASK_ID, USERID, NAME, END_TIME, NOTIFICATION_PERIOD, DESCRIPTION)
	VALUES (@TASKID, @USERID, @NAME, @IEND, @SUBJECT, @DESCRIP)
END

GO

-- INSERT AN ANNOUNCEMENT TO AN EVENT
CREATE PROC USP_INSERTNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_EVENT(EVENT_ID, NOTI_ID, NOTIFICATE)
	VALUES (@EVENTID, @NOTIID, @INOTIFICATE)
END

GO

-- INSERT AN ANNOUNCEMENT TO A TASK
CREATE PROC USP_INSERTNOTI_TASK
@TASKTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_TASK(TASK_ID, NOTI_ID, NOTIFICATE)
	VALUES (@TASKTID, @NOTIID, @INOTIFICATE)
END

GO

-- DELETE AN ACCOUNT
CREATE PROC USP_DELETEUSER
@ID VARCHAR(20)
AS
BEGIN
	UPDATE _USER
	SET IS_DELETED = 1
	WHERE USERID = @ID
END

GO

-- DELETE AN EVENT
CREATE PROC USP_DELETEEVENT
@ID VARCHAR(20)
AS
BEGIN
	UPDATE EVENT
	SET IS_DELETED = 1
	WHERE EVENT_ID = @ID
END

GO

-- DELETE A TASK
CREATE PROC USP_DELETETASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET IS_DELETED = 1
	WHERE TASK_ID = @ID
END

GO

-- DELETE AN ANNOUNCEMENT OF AN EVENT
CREATE PROC USP_DELETENOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_EVENT
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

-- DELETE AN ANNOUNCEMENT OF A TASK
CREATE PROC USP_DELETENOTI_TASK
@TASKID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_TASK
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

-- UPDATE AN USER
CREATE PROC USP_EDITUSER
@USERID VARCHAR(20), @NAME NVARCHAR(50), @EMAIL VARCHAR(50)
AS
BEGIN
	UPDATE _USER
	SET FULLNAME = @NAME, EMAIL = @EMAIL
	WHERE USERID = @USERID
END

GO

-- UPDATE AN EVENT
CREATE PROC USP_EDITEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	UPDATE EVENT
	SET USERID = @USERID, NAME = @NAME, _DATE = @IDATE, CATEGORY = @CATEGORY,
		START_TIME = @ISTART, END_TIME = @IEND, REPEAT = @REPEAT, DESCRIPTION = @DESCRIP
	WHERE EVENT_ID = @EVENTID
END

GO

-- UPDATE A TASK
CREATE PROC USP_EDITTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	UPDATE TASK
	SET USERID = @USERID, NAME = @NAME, END_TIME = @IEND, NOTIFICATION_PERIOD = @SUBJECT, DESCRIPTION = @DESCRIP
	WHERE TASK_ID = @TASKID
END

GO

-- UPDATE AN ANNOUNCEMENT OF EVENT
CREATE PROC USP_EDITNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_EVENT
	SET NOTIFICATE = @NOTIFICATE
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

-- UPDATE AN ANNOUNCEMENT OF TASK
CREATE PROC USP_EDITTASK_EVENT
@TASKID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_TASK
	SET NOTIFICATE = @NOTIFICATE
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

-- MARK AN EVENT COMPLETED
CREATE PROC USP_FINISHTASK
@ID VARCHAR(20), @FINISH_DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @DATE DATETIME
	SET @DATE = CAST(@FINISH_DATE AS DATETIME)
	UPDATE TASK
	SET FINISHED_TIME = @DATE
	WHERE TASK_ID = @ID
END

GO

-- UNDO A TASK (MEANS TO CONVERT A COMPLETED TASK TO UNCOMPLETED)
CREATE PROC USP_RETURNTASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET FINISHED_TIME = NULL
	WHERE TASK_ID = @ID
END

GO
 
-- SHOW ALL OF ACCOUNTS
CREATE PROC LOADLIST_USER
AS
BEGIN
	SELECT * FROM _USER
END

GO

-- SHOW ALL OF EVENTS IN A DAY
CREATE PROC LOADLIST_EVENT
@DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	SELECT EVENT_ID, EMAIL, NAME, CATEGORY, START_TIME, END_TIME, DESCRIPTION
	FROM EVENT JOIN _USER ON EVENT.USERID = _USER.USERID
	WHERE _DATE = CAST(@DATE AS SMALLDATETIME)
END

GO

-- SHOWS UPCOMING AND DURING DEADLINES OF THE DAY
CREATE PROC LOADLIST_TASK
@DATE VARCHAR(50)
AS
BEGIN
	SELECT TASK_ID, EMAIL, NAME, END_TIME, NOTIFICATION_PERIOD, DESCRIPTION
	FROM TASK JOIN _USER ON TASK.TASK_ID = _USER.USERID
	WHERE CREATING_TIME<=CAST(@DATE AS DATETIME) AND CAST(@DATE AS DATETIME)<=END_TIME
END