USE TIME_MANAGEMENT_HANDBOOK

GO

--THÊM 1 TÀI KHOẢN MỚI
CREATE OR ALTER PROC USP_INSERTUSER
@ID VARCHAR(20), @NAME NVARCHAR(50), @EMAIL VARCHAR(50)
AS
BEGIN
	INSERT INTO _USER(USERID, FULLNAME, EMAIL)
	VALUES (@ID, @NAME, @EMAIL)
END

GO

--THÊM MỘT EVENT MỚI
CREATE PROC USP_INSERTEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	INSERT INTO EVENT(EVENT_ID, USERID, NAME, _DATE, CATEGORY, START_TIME, END_TIME, REPEAT, DESCRIPTION)
	VALUES (@EVENTID, @USERID, @NAME, @IDATE, @CATEGORY, @ISTART, @IEND, @REPEAT, @DESCRIP)
END

GO

--THÊM MỘT TASK MỚI
CREATE PROC USP_INSERTTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	INSERT INTO TASK(TASK_ID, USERID, NAME, END_DATE, SUBJECT, DESCRIPTION)
	VALUES (@TASKID, @USERID, @NAME, @IEND, @SUBJECT, @DESCRIP)
END

GO

--THÊM 1 THÔNG BÁO CHO EVENT
CREATE PROC USP_INSERTNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_EVENT(EVENT_ID, NOTI_ID, NOTIFICATE)
	VALUES (@EVENTID, @NOTIID, @INOTIFICATE)
END

GO

--THÊM 1 THÔNG BÁO CHO TASK
CREATE PROC USP_INSERTNOTI_TASK
@TASKTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @INOTIFICATE TIME
	SET @INOTIFICATE = CAST(@NOTIFICATE AS TIME)
	INSERT INTO NOTI_TASK(TASK_ID, NOTI_ID, NOTIFICATE)
	VALUES (@TASKTID, @NOTIID, @INOTIFICATE)
END

GO

--XÓA 1 TÀI KHOẢN
CREATE PROC USP_DELETEUSER
@ID VARCHAR(20)
AS
BEGIN
	UPDATE _USER
	SET IS_DELETED = 1
	WHERE USERID = @ID
END

GO

--XÓA 1 EVENT
CREATE PROC USP_DELETEEVENT
@ID VARCHAR(20)
AS
BEGIN
	UPDATE EVENT
	SET IS_DELETED = 1
	WHERE EVENT_ID = @ID
END

GO

--XÓA 1 TASK
CREATE PROC USP_DELETETASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET IS_DELETED = 1
	WHERE TASK_ID = @ID
END

GO

--XÓA 1 THÔNG BÁO CỦA EVENT
CREATE PROC USP_DELETENOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_EVENT
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

--XÓA 1 THÔNG BÁO CỦA TASK
CREATE PROC USP_DELETENOTI_TASK
@TASKID VARCHAR(20), @NOTIID VARCHAR(10)
AS
BEGIN
	DELETE FROM NOTI_TASK
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

--CHỈNH SỬA 1 USER
CREATE PROC USP_EDITUSER
@USERID VARCHAR(20), @NAME NVARCHAR(50), @EMAIL VARCHAR(50)
AS
BEGIN
	UPDATE _USER
	SET FULLNAME = @NAME, EMAIL = @EMAIL
	WHERE USERID = @USERID
END

GO

--CHỈNH SỬA 1 EVENT
CREATE PROC USP_EDITEVENT
@EVENTID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @DATE VARCHAR(20), @CATEGORY VARCHAR(50),
@START VARCHAR(20), @END VARCHAR(20), @REPEAT NUMERIC(2,1), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IDATE SMALLDATETIME, @ISTART TIME, @IEND TIME
	SET @IDATE = CAST(@DATE AS SMALLDATETIME)
	SET @ISTART = CAST(@START AS TIME)
	SET @IEND = CAST(@END AS TIME)
	UPDATE EVENT
	SET USERID = @USERID, NAME = @NAME, _DATE = @IDATE, CATEGORY = @CATEGORY,
		START_TIME = @ISTART, END_TIME = @IEND, REPEAT = @REPEAT, DESCRIPTION = @DESCRIP
	WHERE EVENT_ID = @EVENTID
END

GO

--CHỈNH SỬA 1 TASK
CREATE PROC USP_EDITTASK
@TASKID VARCHAR(20), @USERID VARCHAR(20), @NAME NVARCHAR(100), @END_DATE VARCHAR(20),
@SUBJECT NVARCHAR(100), @DESCRIP NVARCHAR(200)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @IEND DATETIME
	SET @IEND = CAST(@END_DATE AS DATETIME)
	UPDATE TASK
	SET USERID = @USERID, NAME = @NAME, END_DATE = @IEND, SUBJECT = @SUBJECT, DESCRIPTION = @DESCRIP
	WHERE TASK_ID = @TASKID
END

GO

--CHỈNH SỬA 1 THÔNG BÁO CỦA EVENT
CREATE PROC USP_EDITNOTI_EVENT
@EVENTID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_EVENT
	SET NOTIFICATE = @NOTIFICATE
	WHERE EVENT_ID = @EVENTID AND NOTI_ID = @NOTIID
END

GO

--CHỈNH SỬA 1 THÔNG BÁO CỦA TASK
CREATE PROC USP_EDITTASK_EVENT
@TASKID VARCHAR(20), @NOTIID VARCHAR(10), @NOTIFICATE TIME
AS
BEGIN
	SET DATEFORMAT DMY
	UPDATE NOTI_TASK
	SET NOTIFICATE = @NOTIFICATE
	WHERE TASK_ID = @TASKID AND NOTI_ID = @NOTIID
END

GO

--HOÀN THÀNH 1 TASK
CREATE PROC USP_FINISHTASK
@ID VARCHAR(20), @FINISH_DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	DECLARE @DATE DATETIME
	SET @DATE = CAST(@FINISH_DATE AS DATETIME)
	UPDATE TASK
	SET DATE_FINISHED = @DATE
	WHERE TASK_ID = @ID
END

GO

--HOÀN TÁC 1 TASK (NGHĨA LÀ CHUYỂN 1 TASK ĐÃ HOÀN THÀNH THÀNH CHƯA HOÀN THÀNH)
CREATE PROC USP_RETURNTASK
@ID VARCHAR(20)
AS
BEGIN
	UPDATE TASK
	SET DATE_FINISHED = NULL
	WHERE TASK_ID = @ID
END

GO

--HIỂN THỊ CÁC TÀI KHOẢN
CREATE PROC LOADLIST_USER
AS
BEGIN
	SELECT * FROM _USER
END

GO

--HIỂN THỊ CÁC EVENT TRONG 1 NGÀY
CREATE PROC LOADLIST_EVENT
@DATE VARCHAR(20)
AS
BEGIN
	SET DATEFORMAT DMY
	SELECT EVENT_ID, EMAIL, NAME, CATEGORY, START_TIME, END_TIME, DESCRIPTION
	FROM EVENT JOIN _USER ON EVENT.USERID = _USER.USERID
	WHERE _DATE = CAST(@DATE AS SMALLDATETIME)
END

GO

--HIỂN THỊ CÁC DEADLINE SẮP TỚI HẠN VÀ TRONG NGÀY
CREATE PROC LOADLIST_TASK
@DATE VARCHAR(50)
AS
BEGIN
	SELECT TASK_ID, EMAIL, NAME, END_DATE, SUBJECT, DESCRIPTION
	FROM TASK JOIN _USER ON TASK.TASK_ID = _USER.USERID
	WHERE BEGIN_DATE<=CAST(@DATE AS DATETIME) AND CAST(@DATE AS DATETIME)<=END_DATE
END